Microsoft Windows [Version 6.3.9600]
(c) 2013 Microsoft Corporation. All rights reserved.

c:\Users\a_cOrdiS\AppData\Roaming\Elixir\intro>iex
iex
Eshell V8.2  (abort with ^G)
Interactive Elixir (1.4.2) - press Ctrl+C to exit (type h() ENTER for help)
iex(1)> list = [ 1, 2, 3 ]

[1, 2, 3]
iex(2)> [a, b, c ] = list
[1, 2, 3]
iex(3)> a 

1
iex(4)> b

2
iex(5)> c
3
iex(6)>   C-c C-csys/win32/erl_poll.c:442: Internal error: Invalid wakeup_state=0
バッチ ジョブを終了しますか (Y/N)? Y
Y

c:\Users\a_cOrdiS\AppData\Roaming\Elixir\intro>iex
iex
Eshell V8.2  (abort with ^G)
Interactive Elixir (1.4.2) - press Ctrl+C to exit (type h() ENTER for help)
iex(1)> list = [ 1, 2, [ 3, 4, 5 ] ]
[1, 2, [3, 4, 5]]
iex(2)> [ a, b, c ] = list
[1, 2, [3, 4, 5]]
iex(3)> a
1
iex(4)> x
warning: variable "x" does not exist and is being expanded to "x()", please use parentheses to remove the ambiguity or change the variable name
  iex:4

** (CompileError) iex:4: undefined function x/0
    
iex(4)> b
2
iex(5)> c
[3, 4, 5]
iex(6)>   C-c C-cバッチ ジョブを終了しますか (Y/N)? Y
Y

c:\Users\a_cOrdiS\AppData\Roaming\Elixir\intro>iex
iex
Eshell V8.2  (abort with ^G)
Interactive Elixir (1.4.2) - press Ctrl+C to exit (type h() ENTER for help)
iex(1)> list = [ 1, 2, 3 ]
[1, 2, 3]
iex(2)> 
[ a, 2, b ] = list
nil
iex(3)> a
warning: variable "a" does not exist and is being expanded to "a()", please use parentheses to remove the ambiguity or change the variable name
  iex:3

** (CompileError) iex:3: undefined function a/0
    
iex(3)> b
warning: variable "b" does not exist and is being expanded to "b()", please use parentheses to remove the ambiguity or change the variable name
  iex:3

** (CompileError) iex:3: undefined function b/0
    
iex(3)>   C-c C-cバッチ ジョブを終了しますか (Y/N)? Y
Y

c:\Users\a_cOrdiS\AppData\Roaming\Elixir\intro>iex
iex
Eshell V8.2  (abort with ^G)
Interactive Elixir (1.4.2) - press Ctrl+C to exit (type h() ENTER for help)exit
iex(1)> list = [ 1, 2, 3 ]
[1, 2, 3]
iex(2)> [ a, 2, b ] = list
[1, 2, 3]
iex(3)> a
1
iex(4)> b
3
iex(5)> Interactive Elixir (1.4.2) - press Ctrl+C to exit (type h() ENTER for help)exit
** (SyntaxError) iex:5: syntax error before: Elixir
    
iex(5)>   C-c C-cバッチ ジョブを終了しますか (Y/N)? Y
Y

c:\Users\a_cOrdiS\AppData\Roaming\Elixir\intro>iex
iex
Eshell V8.2  (abort with ^G)
Interactive Elixir (1.4.2) - press Ctrl+C to exit (type h() ENTER for help)
iex(1)> list = [ 1, 2, 3 ]
[1, 2, 3]
iex(2)> [ a, 1, b ] = list
** (MatchError) no match of right hand side value: [1, 2, 3]
    
iex(2)> a = [1, 2, 3]
[1, 2, 3]
iex(3)> a = 43
43
iex(4)> a = 4
4
iex(5)> 4 = a
4
iex(6)> [ a, b ] = [ 1, 2, 3 ]
** (MatchError) no match of right hand side value: [1, 2, 3]
    
iex(6)> a = [ [ 1, 2, 3 ] ]
[[1, 2, 3]]
iex(7)> [ a ] = [ [ 1, 2, 3 ] ]
[[1, 2, 3]]
iex(8)> [ [ a ] ] = [ [ 1, 2, 3 ] ]
** (MatchError) no match of right hand side value: [[1, 2, 3]]
    
iex(8)> h
warning: variable "h" does not exist and is being expanded to "h()", please use parentheses to remove the ambiguity or change the variable name
  iex:8

* IEx.Helpers

Welcome to Interactive Elixir. You are currently
seeing the documentation for the module `IEx.Helpers`
which provides many helpers to make Elixir's shell
more joyful to work with.

This message was triggered by invoking the helper `h()`,
usually referred to as `h/0` (since it expects 0 arguments).

You can use the `h/1` function to invoke the documentation
for any Elixir module or function:

    iex> h Enum
    iex> h Enum.map
    iex> h Enum.reverse/1

You can also use the `i/1` function to introspect any value
you have in the shell:

    iex> i "hello"

There are many other helpers available:

  * `b/1`           - prints callbacks info and docs for a given module
  * `c/1`           - compiles a file into the current directory
  * `c/2`           - compiles a file to the given path
  * `cd/1`          - changes the current directory
  * `clear/0`       - clears the screen
  * `flush/0`       - flushes all messages sent to the shell
  * `h/0`           - prints this help message
  * `h/1`           - prints help for the given module, function or macro
  * `i/1`           - prints information about the data type of any given term
  * `import_file/1` - evaluates the given file in the shell's context
  * `l/1`           - loads the given module's BEAM code
  * `ls/0`          - lists the contents of the current directory
  * `ls/1`          - lists the contents of the specified directory
  * `nl/2`          - deploys local BEAM code to a list of nodes
  * `pid/1`         - creates a PID from a string
  * `pid/3`         - creates a PID with the 3 integer arguments passed
  * `pwd/0`         - prints the current working directory
  * `r/1`           - recompiles the given module's source file
  * `recompile/0`   - recompiles the current project
  * `respawn/0`     - respawns the current shell
  * `s/1`           - prints spec information
  * `t/1`           - prints type information
  * `v/0`           - retrieves the last value from the history
  * `v/1`           - retrieves the nth value from the history

Help for all of those functions can be consulted directly from
the command line using the `h/1` helper itself. Try:

    iex> h(v/0)

To learn more about IEx as a whole, type `h(IEx)`.

iex(9)> h ()
Could not load module nil, got: nofile
iex(10)> h
warning: variable "h" does not exist and is being expanded to "h()", please use parentheses to remove the ambiguity or change the variable name
  iex:10

* IEx.Helpers

Welcome to Interactive Elixir. You are currently
seeing the documentation for the module `IEx.Helpers`
which provides many helpers to make Elixir's shell
more joyful to work with.

This message was triggered by invoking the helper `h()`,
usually referred to as `h/0` (since it expects 0 arguments).

You can use the `h/1` function to invoke the documentation
for any Elixir module or function:

    iex> h Enum
    iex> h Enum.map
    iex> h Enum.reverse/1

You can also use the `i/1` function to introspect any value
you have in the shell:

    iex> i "hello"

There are many other helpers available:

  * `b/1`           - prints callbacks info and docs for a given module
  * `c/1`           - compiles a file into the current directory
  * `c/2`           - compiles a file to the given path
  * `cd/1`          - changes the current directory
  * `clear/0`       - clears the screen
  * `flush/0`       - flushes all messages sent to the shell
  * `h/0`           - prints this help message
  * `h/1`           - prints help for the given module, function or macro
  * `i/1`           - prints information about the data type of any given term
  * `import_file/1` - evaluates the given file in the shell's context
  * `l/1`           - loads the given module's BEAM code
  * `ls/0`          - lists the contents of the current directory
  * `ls/1`          - lists the contents of the specified directory
  * `nl/2`          - deploys local BEAM code to a list of nodes
  * `pid/1`         - creates a PID from a string
  * `pid/3`         - creates a PID with the 3 integer arguments passed
  * `pwd/0`         - prints the current working directory
  * `r/1`           - recompiles the given module's source file
  * `recompile/0`   - recompiles the current project
  * `respawn/0`     - respawns the current shell
  * `s/1`           - prints spec information
  * `t/1`           - prints type information
  * `v/0`           - retrieves the last value from the history
  * `v/1`           - retrieves the nth value from the history

Help for all of those functions can be consulted directly from
the command line using the `h/1` helper itself. Try:

    iex> h(v/0)

To learn more about IEx as a whole, type `h(IEx)`.

iex(11)> h
warning: variable "h" does not exist and is being expanded to "h()", please use parentheses to remove the ambiguity or change the variable name
  iex:11

* IEx.Helpers

Welcome to Interactive Elixir. You are currently
seeing the documentation for the module `IEx.Helpers`
which provides many helpers to make Elixir's shell
more joyful to work with.

This message was triggered by invoking the helper `h()`,
usually referred to as `h/0` (since it expects 0 arguments).

You can use the `h/1` function to invoke the documentation
for any Elixir module or function:

    iex> h Enum
    iex> h Enum.map
    iex> h Enum.reverse/1

You can also use the `i/1` function to introspect any value
you have in the shell:

    iex> i "hello"

There are many other helpers available:

  * `b/1`           - prints callbacks info and docs for a given module
  * `c/1`           - compiles a file into the current directory
  * `c/2`           - compiles a file to the given path
  * `cd/1`          - changes the current directory
  * `clear/0`       - clears the screen
  * `flush/0`       - flushes all messages sent to the shell
  * `h/0`           - prints this help message
  * `h/1`           - prints help for the given module, function or macro
  * `i/1`           - prints information about the data type of any given term
  * `import_file/1` - evaluates the given file in the shell's context
  * `l/1`           - loads the given module's BEAM code
  * `ls/0`          - lists the contents of the current directory
  * `ls/1`          - lists the contents of the specified directory
  * `nl/2`          - deploys local BEAM code to a list of nodes
  * `pid/1`         - creates a PID from a string
  * `pid/3`         - creates a PID with the 3 integer arguments passed
  * `pwd/0`         - prints the current working directory
  * `r/1`           - recompiles the given module's source file
  * `recompile/0`   - recompiles the current project
  * `respawn/0`     - respawns the current shell
  * `s/1`           - prints spec information
  * `t/1`           - prints type information
  * `v/0`           - retrieves the last value from the history
  * `v/1`           - retrieves the nth value from the history

Help for all of those functions can be consulted directly from
the command line using the `h/1` helper itself. Try:

    iex> h(v/0)

To learn more about IEx as a whole, type `h(IEx)`.

iex(12)> h
warning: variable "h" does not exist and is being expanded to "h()", please use parentheses to remove the ambiguity or change the variable name
  iex:12

* IEx.Helpers

Welcome to Interactive Elixir. You are currently
seeing the documentation for the module `IEx.Helpers`
which provides many helpers to make Elixir's shell
more joyful to work with.

This message was triggered by invoking the helper `h()`,
usually referred to as `h/0` (since it expects 0 arguments).

You can use the `h/1` function to invoke the documentation
for any Elixir module or function:

    iex> h Enum
    iex> h Enum.map
    iex> h Enum.reverse/1

You can also use the `i/1` function to introspect any value
you have in the shell:

    iex> i "hello"

There are many other helpers available:

  * `b/1`           - prints callbacks info and docs for a given module
  * `c/1`           - compiles a file into the current directory
  * `c/2`           - compiles a file to the given path
  * `cd/1`          - changes the current directory
  * `clear/0`       - clears the screen
  * `flush/0`       - flushes all messages sent to the shell
  * `h/0`           - prints this help message
  * `h/1`           - prints help for the given module, function or macro
  * `i/1`           - prints information about the data type of any given term
  * `import_file/1` - evaluates the given file in the shell's context
  * `l/1`           - loads the given module's BEAM code
  * `ls/0`          - lists the contents of the current directory
  * `ls/1`          - lists the contents of the specified directory
  * `nl/2`          - deploys local BEAM code to a list of nodes
  * `pid/1`         - creates a PID from a string
  * `pid/3`         - creates a PID with the 3 integer arguments passed
  * `pwd/0`         - prints the current working directory
  * `r/1`           - recompiles the given module's source file
  * `recompile/0`   - recompiles the current project
  * `respawn/0`     - respawns the current shell
  * `s/1`           - prints spec information
  * `t/1`           - prints type information
  * `v/0`           - retrieves the last value from the history
  * `v/1`           - retrieves the nth value from the history

Help for all of those functions can be consulted directly from
the command line using the `h/1` helper itself. Try:

    iex> h(v/0)

To learn more about IEx as a whole, type `h(IEx)`.

iex(13)> clear/0
warning: variable "clear" does not exist and is being expanded to "clear()", please use parentheses to remove the ambiguity or change the variable name
  iex:13

Cannot clear the screen because ANSI escape codes are not enabled on this shell
** (ArithmeticError) bad argument in arithmetic expression
    :erlang./(:"do not show this result in output", 0)
iex(13)> h flush/0
* def flush()

Flushes all messages sent to the shell and prints them out.

iex(14)> flush()
:ok
iex(15)> flush()
:ok
iex(16)> a
[1, 2, 3]
iex(17)> [ a, b, a ] = [ 1, 2, 3 ]

** (MatchError) no match of right hand side value: [1, 2, 3]
    
iex(17)> [ a, b, a ] = [ 1, 1, 2 ]
** (MatchError) no match of right hand side value: [1, 1, 2]
    
iex(17)> [ a, b, a ] = [ 1, 2, 1 ]
[1, 2, 1]
a = 1iex(18)> 
nil
iex(19)> a = 1
1
iex(20)> ^a = 2
** (MatchError) no match of right hand side value: 2
    
iex(20)> ^a = 1
1
iex(21)> ^a = 2 - a
1
iex(22)>   C-c C-cバッチ ジョブを終了しますか (Y/N)? Y
Y

c:\Users\a_cOrdiS\AppData\Roaming\Elixir\intro>iex
iex
Eshell V8.2  (abort with ^G)
Interactive Elixir (1.4.2) - press Ctrl+C to exit (type h() ENTER for help)
iex(1)> a = 2
2
iex(2)> [ a, b, a ] = [ 1, 2, 3 ]
** (MatchError) no match of right hand side value: [1, 2, 3]
    
iex(2)> a = 2
2
iex(3)> [ a, b, a ] = [ 1, 1, 2 ]
** (MatchError) no match of right hand side value: [1, 1, 2]
    
iex(3)> a = 2
2
iex(4)> a = 1
1
iex(5)> a = 2
2
iex(6)> ^a = 2
2
iex(7)> a = 2
2
iex(8)> ^a = 1
** (MatchError) no match of right hand side value: 1
    
iex(8)> a = 2
2
iex(9)> ^a = 2 - a
** (MatchError) no match of right hand side value: 0
    
iex(9)> a = 2
2
iex(10)> [ a, b, a ] = [ 1, 1, 2 ]
** (MatchError) no match of right hand side value: [1, 1, 2]
    
iex(10)> 